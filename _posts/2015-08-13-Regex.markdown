---
layout: post
title:  "Regex!"
date:   2015-08-13 16:43:26
categories: jekyll update
tags: [regex]
---

| 元字符 | 释义 |
| ------ | ---- |
| .      | 匹配任意一个单个的字符。|
| ^      | 取非 |
| [ ]    | 字符集合开始 结束 |
| ()     | 子表达式的开始 结束 |
| \d     | 任何一个数字字符（等价于[0-9]) |
| \D     | 任何一个非数字字符（等价于[^0-9]) |
| \w     | 任何一个字母数字字符(大小写均可)或下划线字符（等价于[a-zA-Z0-9_]) |
| \W     | 任何一个非字母数字字符(大小写均可)或下划线字符（等价于[^a-zA-Z0-9_]) |
| \s     | 任何一个空白字符(等价于[\f\n\r\t\v]) 不包含 [\b] |
| \S     | 任何一个非空白字符(等价于[\f\n\r\t\v]) 不包含 [\b] |
| +      | 匹配一个或多个字符(至少一个) |
| *      | 匹配零个或多个字符 |
| ?      | 只能匹配一个字符（或字符集合）的零次或一次出现 |

贪婪和懒惰元字符

| 贪婪型元字符 | 懒惰型元字符 |
| ------------ | ------------ |
| *            | *?           |
| +            | +?           |
| {n,}         | {n,}?        |

空白元字符

| 元字符 | 说明 |
| ------ | ---- |
| [\b]   | 回退 （并删除）一个字符（Backspace键）|
| \f     | 换页符 |
| \n     | 换行符 |
| \r     | 回车符 |
| \t     | 制表符（Tab键）|
| \v     | 垂直制表符 |


位置匹配

| 元字符 | 说明 |
| ------ | ---- |
| \b     | 匹配一个单词的开始或结尾 |
| ^      | 定义字符串开头 |
| $      | 定义字符串结尾 |

回溯引用匹配

| 元字符 | 说明 |
| ------ | ---- |
| \1     | 1即匹配第一个子表达式,类推 |


用来大小写转换的元字符

| 元字符 | 说明 |
| ------ | ---- |
| \E     | 结束 \L 或 \U 转换 |
| \I     | 把下一个字符转换为小写 |
| \L     | 把 \L 到 \E 之间的字符全部转换为小写 |
| \u     | 把下一个字符转换为大写 |
| \U     | 把 \U 到 \E 之间的字符全部转换为大写 |

\l 和 \u 只能把下一个字符（或子表达式）转换为小写或大写。\L 和 \U 将把它后面的所有字符串转换为小写或大写，直到遇上 \E 为止。

前后查找

. lookahead 向前查找
. lookbehind 向后查找 (JavaScript) 不支持向后查找

向前/后查找 匹配本身其实是有返回结果的，知识这个结果的字符长度永远是0而已。因此，前后查找操作有时也被称为零宽度（zero－width）匹配操作。

| 元字符 | 说明 |
| ------ | ---- |
| ?=     | 向前匹配 |
| ?<=    | 向后匹配 |
| (?=)   | 正向前查找 |
| (?!)   | 负向前查找 |
| (?<=)  | 正向后查找 |
| (?<!)  | 负向后查找 |

回溯引用条件

语法:(?(backreference) true-regex)


grep 

| 语法  | 说明  |
| ----- | - |
| -E    | 使用扩展正则表达式 |
| -G    | 使用基本正则表达式 |
| -P    | 使用 Perl 正则表达式 |

* 在默认的情况下，grep 将把包含着匹配的各个文本行全部显示出来；如果你只想查看匹配结果，请使用 -o 选项。
* 使用 -v 选项将对整个匹配操作进行求非 －－ 只显示不匹配的文本行。
* 使用 -c 选项将只显示匹配的总行数而不是次匹配的细节。
* grep 工具职能用来进行搜索操作，不能用来进行替换操作。

JavaScript

* JavaScript 1.x 版本在 String 和 RegEx 对象的以下几个方法里实现了正则表达式处理。
  
  * exce: 一个用来搜索一个匹配的 RegEx 方法。
  * match : 一个用来匹配一个字符串的 String 方法。
  * replace : 一个用来完成替换操作的 String 方法。
  * search : 一个用来测试在某给定字符串里是否存在着一个匹配的 String 方法。
  * split : 一个用来把字符串拆分为多个子串的 String 方法。
  * test : 一个用来测试在某给定字符串里是否存在着一个匹配的 RegEx 方法。

* JavaScript 对正则表达式的支持源自 Perl 语言，但需要注意以下几个问题。
  * JavaScript 使用命令行选项来管理全局的区分大小写搜索： g 选项激活全局搜索功能，i 选项让匹配操作不区分字母的大小写，这两个选项可以组合为 gi。
  * 其他命令行选项（版本4及以后的浏览器支持）包括：m，支持多行字符串；s，支持单行字符串；x，忽略正则表达式模式里的空白字符串。
  * 在使用回溯引用的时候，$' 将返回被匹配字符串前面的所有东西，$` 将返回被匹配字符串后面的所有东西， $+ 将返回最后一个被匹配的子表达式， $& 将返回被匹配到的所有东西。
  * JavaScript 提供了一个名为 RegExp 的全局对象， 在执行完一个正则表达式之后，你们可以通过这个对象获得与这次执行有关的信息。
  * JavaScript 不支持 POSIX 字符串。
  * JavaScript 不支持 \A 和 \Z。

MySQL

REGEXP "expression"
    
* MySQL 正则表达式支持有很用，功能也很强大，但它还算不上是一个完备的正则表达式实现。
  * 只提供了搜索支持，不支持使用正则表达式进行替换操作。
  * 在默认的情况下，正则表达式嗖嗖不区分字母的大小写。如果需要区分字母的大小写，必须再增加一个 BINARY 关键字（放在 REGEXP 和模式之间)。
  * 用 [[:<]] 来匹配一个单词的开头， 用[[:>]] 来匹配一个单词的结束。
  * 不支持向前预测。
  * 不支持嵌入条件。
  * 不支持八进制字符搜索。
  * 不支持 \a,\b,\e,\f,\v。
  * 不支持回溯引用。

PHP
 
* PHP 通过他的 PCRE 组建提供了与 Perl 相兼容的正则表达式支持。

  * preg_grep() : 进行一次搜索，匹配结果将作为数组返回。
  * preg_match() : 进行一次正则表达式搜索，返回第一个匹配。
  * preg_match_all() : 进行一次正则表达式搜索，返回所有的匹配。
  * preg_quote() : 这个函数的输入参数是一个模式， 返回值是该模式的转义版本。
  * preg_replace() : 进行一次“搜索并替换”操作。
  * preg_replace_callback() : 进行一次“搜索并替换”操作，但使用一个回调（callback）函数来完成实际替换动作。
  * preg_split() : 把一个字符串拆分为子字符串。

* 请注意一下事项。
  * 在默认的情况下，匹配操作不区分字母的大小写。如果不想区分字母的大小写，必须使用 i 限定符。
  * 在默认的情况下，匹配操作仅限用于单行字符串。如果需要匹配多行字符串，必须使用 m 限定符。
  * preg_replace(), preg_replace_callback() 和 preg_split() 函数都支持一个可选的参数，该参数用来给出一个上限值－－对字符串进行替换或拆分的最大次数。
  * preg_replace(), 和 preg_replace_callback() 是从 PHP 4才开始有的，提他函数都是从 PHP 3 开始就被支持的。
  * 在 PHP 4.0.4 和更高版本里，回溯引用可以用 Perl 语言的 $ 语法（例如 $1）来引用；在较早的版本里必须用 \\ 来替代 $。
  * 不支持 \l, \u, \L, \U, \Q 和 \v。

IP 地址
 
 * ( ( (\d{1,2}) | (1\d{2}) | (2[0-4]\d) | (25[0-5]) ) \.){3} ((\d{1,2}) | (1\d{2}) | (2[0-4]\d) |(25[0-5]) )


URL 地址

* https?://[-\w.]+(:\d+)?(/([\w/_.]*)?)?


完整的 URL 地址

* https?://(\w*:\w*@)?[-\w.]+(:\d+)?(/([\w/_.]*)(\?\S+)?)?)?


电子邮件地址

* (\w+\.)*\w+@(\w+\.)+[A-Za-z]+


HTML注释

* <!-{2,}.*?-{2,}>


JavaScript注释
* //.*


基本的元字符

| 元字符 | 说明 |
| ------ | ---- |
| .      | 匹配任意单个字符 |
| |      | 逻辑或操作符 |
| []     | 匹配字符集合中的一个字符 |
| [^]    | 对字符集合求非 |
| -      | 定义一个区间(例如[A-Z]) |
| \      | 对下一个字符转义 |

数量元字符 

| 元字符 | 说明 |
| ------ | ---- |
| *      | 匹配前一个字符(子表达式)的零次或多次重复 |
| *?     | * 的懒惰型版本 |
| +      | 匹配前一个字符(子表达式)的一次或多次重复 |
| +?     | + 的懒惰型版本 |
| ?      | 匹配前一个字符(子表达式)的零次或多次重复 |
| {n}    | 匹配前一个字符(子表达式)的n次重复 |
| {m,n}  | 匹配前一个字符(子表达式)至少 m 次且至多 n 次重复 |
| {n,}   | 匹配前一个字符(子表达式) n 次或更多次重复 |
| {n,}?  | {n,}的懒惰型版本 |

位置元字符

| 元字符 | 说明 |
| ------ | ---- |
| ^      | 匹配字符串的开头
| \A     | 匹配字符串的开头
| $      | 匹配字符串的结束
| \Z     | 匹配字符串的开头
| \<     | 匹配单词的开头
| \>     | 匹配单词的结束
| \b     | 匹配单词边界(开头和结束)
| \B     | \b 的反义

特殊字符元字符

| 元字符 | 说明 |
| ------ | ---- |
| [\b]   | 退格字符 |
| \c     | 匹配一个控制字符 |
| \d     | 匹配任意数字字符 |
| \D     | \d 的反义 |
| \f     | 换页符 |
| \n     | 换行符 |
| \r     | 回车符 |
| \s     | 匹配一个空白字符 |
| \S     | \s 的反义 |
| \t     | 制表符(Tab字符) |
| \v     | 垂直制表符 |
| \w     | 匹配任意字母数字字符或下划线字符 |
| \W     | \w 的反义
| \x     | 匹配一个十六进制数字 |
| \0     | 匹配一个八进制数字 |

回溯引用和前后查找

| 元字符 | 说明 |
| ------ | ---- |
| ()     | 定义一个子表达式 |
| \1     | 匹配第1一个子表达式； \2代表第2个子表达式，依次类推 |
| ?=     | 向前查找 |
| ?<=    | 向后查找 |
| ?!     | 负向前查找 |
| ?<!    | 负向后查找 |
| ?()    | 条件(if then) |
| ?()!   | 条件(if then else) |

大小写转换

| 元字符 | 说明 |
| ------ | ---- |
| \E     | 结束 \L 或 \U 转换
| \l     | 把下一个字符转换为小写
| \L     | 把后面的字符转换为小写，直到遇见 \E 为止
| \u     | 把下一个字符转换为大写 
| \U     | 把后面的字符转换为大写，直到遇见 \E 为止

匹配模式

| 元字符 | 说明 |
| ------ | ---- |
| (?m)   | 分行匹配模式 |

